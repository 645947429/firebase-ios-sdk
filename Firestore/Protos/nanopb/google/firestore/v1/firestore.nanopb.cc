/*
 * Copyright 2018 Google
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* Automatically generated nanopb constant definitions */
/* Generated by nanopb-0.3.9.2 */

#include "firestore.nanopb.h"

#include "absl/strings/str_cat.h"
#include "nanopb_pretty_printers.h"

namespace firebase {
namespace firestore {
/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif



const pb_field_t google_firestore_v1_GetDocumentRequest_fields[5] = {
    PB_FIELD(  1, BYTES   , SINGULAR, POINTER , FIRST, google_firestore_v1_GetDocumentRequest, name, name, 0),
    PB_FIELD(  2, MESSAGE , SINGULAR, STATIC  , OTHER, google_firestore_v1_GetDocumentRequest, mask, name, &google_firestore_v1_DocumentMask_fields),
    PB_ANONYMOUS_ONEOF_FIELD(consistency_selector,   3, BYTES   , ONEOF, POINTER , OTHER, google_firestore_v1_GetDocumentRequest, transaction, mask, 0),
    PB_ANONYMOUS_ONEOF_FIELD(consistency_selector,   5, MESSAGE , ONEOF, STATIC  , UNION, google_firestore_v1_GetDocumentRequest, read_time, mask, &google_protobuf_Timestamp_fields),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_ListDocumentsRequest_fields[10] = {
    PB_FIELD(  1, BYTES   , SINGULAR, POINTER , FIRST, google_firestore_v1_ListDocumentsRequest, parent, parent, 0),
    PB_FIELD(  2, BYTES   , SINGULAR, POINTER , OTHER, google_firestore_v1_ListDocumentsRequest, collection_id, parent, 0),
    PB_FIELD(  3, INT32   , SINGULAR, STATIC  , OTHER, google_firestore_v1_ListDocumentsRequest, page_size, collection_id, 0),
    PB_FIELD(  4, BYTES   , SINGULAR, POINTER , OTHER, google_firestore_v1_ListDocumentsRequest, page_token, page_size, 0),
    PB_FIELD(  6, BYTES   , SINGULAR, POINTER , OTHER, google_firestore_v1_ListDocumentsRequest, order_by, page_token, 0),
    PB_FIELD(  7, MESSAGE , SINGULAR, STATIC  , OTHER, google_firestore_v1_ListDocumentsRequest, mask, order_by, &google_firestore_v1_DocumentMask_fields),
    PB_ANONYMOUS_ONEOF_FIELD(consistency_selector,   8, BYTES   , ONEOF, POINTER , OTHER, google_firestore_v1_ListDocumentsRequest, transaction, mask, 0),
    PB_ANONYMOUS_ONEOF_FIELD(consistency_selector,  10, MESSAGE , ONEOF, STATIC  , UNION, google_firestore_v1_ListDocumentsRequest, read_time, mask, &google_protobuf_Timestamp_fields),
    PB_FIELD( 12, BOOL    , SINGULAR, STATIC  , OTHER, google_firestore_v1_ListDocumentsRequest, show_missing, read_time, 0),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_ListDocumentsResponse_fields[3] = {
    PB_FIELD(  1, MESSAGE , REPEATED, POINTER , FIRST, google_firestore_v1_ListDocumentsResponse, documents, documents, &google_firestore_v1_Document_fields),
    PB_FIELD(  2, BYTES   , SINGULAR, POINTER , OTHER, google_firestore_v1_ListDocumentsResponse, next_page_token, documents, 0),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_CreateDocumentRequest_fields[6] = {
    PB_FIELD(  1, BYTES   , SINGULAR, POINTER , FIRST, google_firestore_v1_CreateDocumentRequest, parent, parent, 0),
    PB_FIELD(  2, BYTES   , SINGULAR, POINTER , OTHER, google_firestore_v1_CreateDocumentRequest, collection_id, parent, 0),
    PB_FIELD(  3, BYTES   , SINGULAR, POINTER , OTHER, google_firestore_v1_CreateDocumentRequest, document_id, collection_id, 0),
    PB_FIELD(  4, MESSAGE , SINGULAR, STATIC  , OTHER, google_firestore_v1_CreateDocumentRequest, document, document_id, &google_firestore_v1_Document_fields),
    PB_FIELD(  5, MESSAGE , SINGULAR, STATIC  , OTHER, google_firestore_v1_CreateDocumentRequest, mask, document, &google_firestore_v1_DocumentMask_fields),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_UpdateDocumentRequest_fields[5] = {
    PB_FIELD(  1, MESSAGE , SINGULAR, STATIC  , FIRST, google_firestore_v1_UpdateDocumentRequest, document, document, &google_firestore_v1_Document_fields),
    PB_FIELD(  2, MESSAGE , SINGULAR, STATIC  , OTHER, google_firestore_v1_UpdateDocumentRequest, update_mask, document, &google_firestore_v1_DocumentMask_fields),
    PB_FIELD(  3, MESSAGE , SINGULAR, STATIC  , OTHER, google_firestore_v1_UpdateDocumentRequest, mask, update_mask, &google_firestore_v1_DocumentMask_fields),
    PB_FIELD(  4, MESSAGE , SINGULAR, STATIC  , OTHER, google_firestore_v1_UpdateDocumentRequest, current_document, mask, &google_firestore_v1_Precondition_fields),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_DeleteDocumentRequest_fields[3] = {
    PB_FIELD(  1, BYTES   , SINGULAR, POINTER , FIRST, google_firestore_v1_DeleteDocumentRequest, name, name, 0),
    PB_FIELD(  2, MESSAGE , SINGULAR, STATIC  , OTHER, google_firestore_v1_DeleteDocumentRequest, current_document, name, &google_firestore_v1_Precondition_fields),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_BatchGetDocumentsRequest_fields[7] = {
    PB_FIELD(  1, BYTES   , SINGULAR, POINTER , FIRST, google_firestore_v1_BatchGetDocumentsRequest, database, database, 0),
    PB_FIELD(  2, BYTES   , REPEATED, POINTER , OTHER, google_firestore_v1_BatchGetDocumentsRequest, documents, database, 0),
    PB_FIELD(  3, MESSAGE , SINGULAR, STATIC  , OTHER, google_firestore_v1_BatchGetDocumentsRequest, mask, documents, &google_firestore_v1_DocumentMask_fields),
    PB_ANONYMOUS_ONEOF_FIELD(consistency_selector,   4, BYTES   , ONEOF, POINTER , OTHER, google_firestore_v1_BatchGetDocumentsRequest, transaction, mask, 0),
    PB_ANONYMOUS_ONEOF_FIELD(consistency_selector,   5, MESSAGE , ONEOF, STATIC  , UNION, google_firestore_v1_BatchGetDocumentsRequest, new_transaction, mask, &google_firestore_v1_TransactionOptions_fields),
    PB_ANONYMOUS_ONEOF_FIELD(consistency_selector,   7, MESSAGE , ONEOF, STATIC  , UNION, google_firestore_v1_BatchGetDocumentsRequest, read_time, mask, &google_protobuf_Timestamp_fields),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_BatchGetDocumentsResponse_fields[5] = {
    PB_ANONYMOUS_ONEOF_FIELD(result,   1, MESSAGE , ONEOF, STATIC  , FIRST, google_firestore_v1_BatchGetDocumentsResponse, found, found, &google_firestore_v1_Document_fields),
    PB_ANONYMOUS_ONEOF_FIELD(result,   2, BYTES   , ONEOF, POINTER , UNION, google_firestore_v1_BatchGetDocumentsResponse, missing, missing, 0),
    PB_FIELD(  3, BYTES   , SINGULAR, POINTER , OTHER, google_firestore_v1_BatchGetDocumentsResponse, transaction, missing, 0),
    PB_FIELD(  4, MESSAGE , SINGULAR, STATIC  , OTHER, google_firestore_v1_BatchGetDocumentsResponse, read_time, transaction, &google_protobuf_Timestamp_fields),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_BeginTransactionRequest_fields[3] = {
    PB_FIELD(  1, BYTES   , SINGULAR, POINTER , FIRST, google_firestore_v1_BeginTransactionRequest, database, database, 0),
    PB_FIELD(  2, MESSAGE , SINGULAR, STATIC  , OTHER, google_firestore_v1_BeginTransactionRequest, options, database, &google_firestore_v1_TransactionOptions_fields),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_BeginTransactionResponse_fields[2] = {
    PB_FIELD(  1, BYTES   , SINGULAR, POINTER , FIRST, google_firestore_v1_BeginTransactionResponse, transaction, transaction, 0),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_CommitRequest_fields[4] = {
    PB_FIELD(  1, BYTES   , SINGULAR, POINTER , FIRST, google_firestore_v1_CommitRequest, database, database, 0),
    PB_FIELD(  2, MESSAGE , REPEATED, POINTER , OTHER, google_firestore_v1_CommitRequest, writes, database, &google_firestore_v1_Write_fields),
    PB_FIELD(  3, BYTES   , SINGULAR, POINTER , OTHER, google_firestore_v1_CommitRequest, transaction, writes, 0),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_CommitResponse_fields[3] = {
    PB_FIELD(  1, MESSAGE , REPEATED, POINTER , FIRST, google_firestore_v1_CommitResponse, write_results, write_results, &google_firestore_v1_WriteResult_fields),
    PB_FIELD(  2, MESSAGE , SINGULAR, STATIC  , OTHER, google_firestore_v1_CommitResponse, commit_time, write_results, &google_protobuf_Timestamp_fields),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_RollbackRequest_fields[3] = {
    PB_FIELD(  1, BYTES   , SINGULAR, POINTER , FIRST, google_firestore_v1_RollbackRequest, database, database, 0),
    PB_FIELD(  2, BYTES   , SINGULAR, POINTER , OTHER, google_firestore_v1_RollbackRequest, transaction, database, 0),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_RunQueryRequest_fields[6] = {
    PB_FIELD(  1, BYTES   , SINGULAR, POINTER , FIRST, google_firestore_v1_RunQueryRequest, parent, parent, 0),
    PB_ONEOF_FIELD(query_type,   2, MESSAGE , ONEOF, STATIC  , OTHER, google_firestore_v1_RunQueryRequest, structured_query, parent, &google_firestore_v1_StructuredQuery_fields),
    PB_ONEOF_FIELD(consistency_selector,   5, BYTES   , ONEOF, POINTER , OTHER, google_firestore_v1_RunQueryRequest, transaction, query_type.structured_query, 0),
    PB_ONEOF_FIELD(consistency_selector,   6, MESSAGE , ONEOF, STATIC  , UNION, google_firestore_v1_RunQueryRequest, new_transaction, query_type.structured_query, &google_firestore_v1_TransactionOptions_fields),
    PB_ONEOF_FIELD(consistency_selector,   7, MESSAGE , ONEOF, STATIC  , UNION, google_firestore_v1_RunQueryRequest, read_time, query_type.structured_query, &google_protobuf_Timestamp_fields),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_RunQueryResponse_fields[5] = {
    PB_FIELD(  1, MESSAGE , SINGULAR, STATIC  , FIRST, google_firestore_v1_RunQueryResponse, document, document, &google_firestore_v1_Document_fields),
    PB_FIELD(  2, BYTES   , SINGULAR, POINTER , OTHER, google_firestore_v1_RunQueryResponse, transaction, document, 0),
    PB_FIELD(  3, MESSAGE , SINGULAR, STATIC  , OTHER, google_firestore_v1_RunQueryResponse, read_time, transaction, &google_protobuf_Timestamp_fields),
    PB_FIELD(  4, INT32   , SINGULAR, STATIC  , OTHER, google_firestore_v1_RunQueryResponse, skipped_results, read_time, 0),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_WriteRequest_fields[6] = {
    PB_FIELD(  1, BYTES   , SINGULAR, POINTER , FIRST, google_firestore_v1_WriteRequest, database, database, 0),
    PB_FIELD(  2, BYTES   , SINGULAR, POINTER , OTHER, google_firestore_v1_WriteRequest, stream_id, database, 0),
    PB_FIELD(  3, MESSAGE , REPEATED, POINTER , OTHER, google_firestore_v1_WriteRequest, writes, stream_id, &google_firestore_v1_Write_fields),
    PB_FIELD(  4, BYTES   , SINGULAR, POINTER , OTHER, google_firestore_v1_WriteRequest, stream_token, writes, 0),
    PB_FIELD(  5, MESSAGE , REPEATED, POINTER , OTHER, google_firestore_v1_WriteRequest, labels, stream_token, &google_firestore_v1_WriteRequest_LabelsEntry_fields),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_WriteRequest_LabelsEntry_fields[3] = {
    PB_FIELD(  1, BYTES   , SINGULAR, POINTER , FIRST, google_firestore_v1_WriteRequest_LabelsEntry, key, key, 0),
    PB_FIELD(  2, BYTES   , SINGULAR, POINTER , OTHER, google_firestore_v1_WriteRequest_LabelsEntry, value, key, 0),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_WriteResponse_fields[5] = {
    PB_FIELD(  1, BYTES   , SINGULAR, POINTER , FIRST, google_firestore_v1_WriteResponse, stream_id, stream_id, 0),
    PB_FIELD(  2, BYTES   , SINGULAR, POINTER , OTHER, google_firestore_v1_WriteResponse, stream_token, stream_id, 0),
    PB_FIELD(  3, MESSAGE , REPEATED, POINTER , OTHER, google_firestore_v1_WriteResponse, write_results, stream_token, &google_firestore_v1_WriteResult_fields),
    PB_FIELD(  4, MESSAGE , SINGULAR, STATIC  , OTHER, google_firestore_v1_WriteResponse, commit_time, write_results, &google_protobuf_Timestamp_fields),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_ListenRequest_fields[5] = {
    PB_FIELD(  1, BYTES   , SINGULAR, POINTER , FIRST, google_firestore_v1_ListenRequest, database, database, 0),
    PB_ANONYMOUS_ONEOF_FIELD(target_change,   2, MESSAGE , ONEOF, STATIC  , OTHER, google_firestore_v1_ListenRequest, add_target, database, &google_firestore_v1_Target_fields),
    PB_ANONYMOUS_ONEOF_FIELD(target_change,   3, INT32   , ONEOF, STATIC  , UNION, google_firestore_v1_ListenRequest, remove_target, database, 0),
    PB_FIELD(  4, MESSAGE , REPEATED, POINTER , OTHER, google_firestore_v1_ListenRequest, labels, remove_target, &google_firestore_v1_ListenRequest_LabelsEntry_fields),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_ListenRequest_LabelsEntry_fields[3] = {
    PB_FIELD(  1, BYTES   , SINGULAR, POINTER , FIRST, google_firestore_v1_ListenRequest_LabelsEntry, key, key, 0),
    PB_FIELD(  2, BYTES   , SINGULAR, POINTER , OTHER, google_firestore_v1_ListenRequest_LabelsEntry, value, key, 0),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_ListenResponse_fields[6] = {
    PB_ANONYMOUS_ONEOF_FIELD(response_type,   2, MESSAGE , ONEOF, STATIC  , FIRST, google_firestore_v1_ListenResponse, target_change, target_change, &google_firestore_v1_TargetChange_fields),
    PB_ANONYMOUS_ONEOF_FIELD(response_type,   3, MESSAGE , ONEOF, STATIC  , UNION, google_firestore_v1_ListenResponse, document_change, document_change, &google_firestore_v1_DocumentChange_fields),
    PB_ANONYMOUS_ONEOF_FIELD(response_type,   4, MESSAGE , ONEOF, STATIC  , UNION, google_firestore_v1_ListenResponse, document_delete, document_delete, &google_firestore_v1_DocumentDelete_fields),
    PB_ANONYMOUS_ONEOF_FIELD(response_type,   5, MESSAGE , ONEOF, STATIC  , UNION, google_firestore_v1_ListenResponse, filter, filter, &google_firestore_v1_ExistenceFilter_fields),
    PB_ANONYMOUS_ONEOF_FIELD(response_type,   6, MESSAGE , ONEOF, STATIC  , UNION, google_firestore_v1_ListenResponse, document_remove, document_remove, &google_firestore_v1_DocumentRemove_fields),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_Target_fields[7] = {
    PB_ONEOF_FIELD(target_type,   2, MESSAGE , ONEOF, STATIC  , FIRST, google_firestore_v1_Target, query, query, &google_firestore_v1_Target_QueryTarget_fields),
    PB_ONEOF_FIELD(target_type,   3, MESSAGE , ONEOF, STATIC  , UNION, google_firestore_v1_Target, documents, documents, &google_firestore_v1_Target_DocumentsTarget_fields),
    PB_ONEOF_FIELD(resume_type,   4, BYTES   , ONEOF, POINTER , OTHER, google_firestore_v1_Target, resume_token, target_type.documents, 0),
    PB_ONEOF_FIELD(resume_type,  11, MESSAGE , ONEOF, STATIC  , UNION, google_firestore_v1_Target, read_time, target_type.documents, &google_protobuf_Timestamp_fields),
    PB_FIELD(  5, INT32   , SINGULAR, STATIC  , OTHER, google_firestore_v1_Target, target_id, resume_type.read_time, 0),
    PB_FIELD(  6, BOOL    , SINGULAR, STATIC  , OTHER, google_firestore_v1_Target, once, target_id, 0),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_Target_DocumentsTarget_fields[2] = {
    PB_FIELD(  2, BYTES   , REPEATED, POINTER , FIRST, google_firestore_v1_Target_DocumentsTarget, documents, documents, 0),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_Target_QueryTarget_fields[3] = {
    PB_FIELD(  1, BYTES   , SINGULAR, POINTER , FIRST, google_firestore_v1_Target_QueryTarget, parent, parent, 0),
    PB_ANONYMOUS_ONEOF_FIELD(query_type,   2, MESSAGE , ONEOF, STATIC  , OTHER, google_firestore_v1_Target_QueryTarget, structured_query, parent, &google_firestore_v1_StructuredQuery_fields),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_TargetChange_fields[6] = {
    PB_FIELD(  1, UENUM   , SINGULAR, STATIC  , FIRST, google_firestore_v1_TargetChange, target_change_type, target_change_type, 0),
    PB_FIELD(  2, INT32   , REPEATED, POINTER , OTHER, google_firestore_v1_TargetChange, target_ids, target_change_type, 0),
    PB_FIELD(  3, MESSAGE , OPTIONAL, STATIC  , OTHER, google_firestore_v1_TargetChange, cause, target_ids, &google_rpc_Status_fields),
    PB_FIELD(  4, BYTES   , SINGULAR, POINTER , OTHER, google_firestore_v1_TargetChange, resume_token, cause, 0),
    PB_FIELD(  6, MESSAGE , SINGULAR, STATIC  , OTHER, google_firestore_v1_TargetChange, read_time, resume_token, &google_protobuf_Timestamp_fields),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_ListCollectionIdsRequest_fields[4] = {
    PB_FIELD(  1, BYTES   , SINGULAR, POINTER , FIRST, google_firestore_v1_ListCollectionIdsRequest, parent, parent, 0),
    PB_FIELD(  2, INT32   , SINGULAR, STATIC  , OTHER, google_firestore_v1_ListCollectionIdsRequest, page_size, parent, 0),
    PB_FIELD(  3, BYTES   , SINGULAR, POINTER , OTHER, google_firestore_v1_ListCollectionIdsRequest, page_token, page_size, 0),
    PB_LAST_FIELD
};

const pb_field_t google_firestore_v1_ListCollectionIdsResponse_fields[3] = {
    PB_FIELD(  1, BYTES   , REPEATED, POINTER , FIRST, google_firestore_v1_ListCollectionIdsResponse, collection_ids, collection_ids, 0),
    PB_FIELD(  2, BYTES   , SINGULAR, POINTER , OTHER, google_firestore_v1_ListCollectionIdsResponse, next_page_token, collection_ids, 0),
    PB_LAST_FIELD
};



/* Check that field information fits in pb_field_t */
#if !defined(PB_FIELD_32BIT)
/* If you get an error here, it means that you need to define PB_FIELD_32BIT
 * compile-time option. You can do that in pb.h or on compiler command line.
 * 
 * The reason you need to do this is that some of your messages contain tag
 * numbers or field sizes that are larger than what can fit in 8 or 16 bit
 * field descriptors.
 */
PB_STATIC_ASSERT((pb_membersize(google_firestore_v1_GetDocumentRequest, read_time) < 65536 && pb_membersize(google_firestore_v1_GetDocumentRequest, mask) < 65536 && pb_membersize(google_firestore_v1_ListDocumentsRequest, read_time) < 65536 && pb_membersize(google_firestore_v1_ListDocumentsRequest, mask) < 65536 && pb_membersize(google_firestore_v1_CreateDocumentRequest, document) < 65536 && pb_membersize(google_firestore_v1_CreateDocumentRequest, mask) < 65536 && pb_membersize(google_firestore_v1_UpdateDocumentRequest, document) < 65536 && pb_membersize(google_firestore_v1_UpdateDocumentRequest, update_mask) < 65536 && pb_membersize(google_firestore_v1_UpdateDocumentRequest, mask) < 65536 && pb_membersize(google_firestore_v1_UpdateDocumentRequest, current_document) < 65536 && pb_membersize(google_firestore_v1_DeleteDocumentRequest, current_document) < 65536 && pb_membersize(google_firestore_v1_BatchGetDocumentsRequest, new_transaction) < 65536 && pb_membersize(google_firestore_v1_BatchGetDocumentsRequest, read_time) < 65536 && pb_membersize(google_firestore_v1_BatchGetDocumentsRequest, mask) < 65536 && pb_membersize(google_firestore_v1_BatchGetDocumentsResponse, found) < 65536 && pb_membersize(google_firestore_v1_BatchGetDocumentsResponse, read_time) < 65536 && pb_membersize(google_firestore_v1_BeginTransactionRequest, options) < 65536 && pb_membersize(google_firestore_v1_CommitResponse, commit_time) < 65536 && pb_membersize(google_firestore_v1_RunQueryRequest, query_type.structured_query) < 65536 && pb_membersize(google_firestore_v1_RunQueryRequest, consistency_selector.new_transaction) < 65536 && pb_membersize(google_firestore_v1_RunQueryRequest, consistency_selector.read_time) < 65536 && pb_membersize(google_firestore_v1_RunQueryResponse, document) < 65536 && pb_membersize(google_firestore_v1_RunQueryResponse, read_time) < 65536 && pb_membersize(google_firestore_v1_WriteResponse, commit_time) < 65536 && pb_membersize(google_firestore_v1_ListenRequest, add_target) < 65536 && pb_membersize(google_firestore_v1_ListenResponse, target_change) < 65536 && pb_membersize(google_firestore_v1_ListenResponse, document_change) < 65536 && pb_membersize(google_firestore_v1_ListenResponse, document_delete) < 65536 && pb_membersize(google_firestore_v1_ListenResponse, filter) < 65536 && pb_membersize(google_firestore_v1_ListenResponse, document_remove) < 65536 && pb_membersize(google_firestore_v1_Target, target_type.query) < 65536 && pb_membersize(google_firestore_v1_Target, target_type.documents) < 65536 && pb_membersize(google_firestore_v1_Target, resume_type.read_time) < 65536 && pb_membersize(google_firestore_v1_Target_QueryTarget, structured_query) < 65536 && pb_membersize(google_firestore_v1_TargetChange, cause) < 65536 && pb_membersize(google_firestore_v1_TargetChange, read_time) < 65536), YOU_MUST_DEFINE_PB_FIELD_32BIT_FOR_MESSAGES_google_firestore_v1_GetDocumentRequest_google_firestore_v1_ListDocumentsRequest_google_firestore_v1_ListDocumentsResponse_google_firestore_v1_CreateDocumentRequest_google_firestore_v1_UpdateDocumentRequest_google_firestore_v1_DeleteDocumentRequest_google_firestore_v1_BatchGetDocumentsRequest_google_firestore_v1_BatchGetDocumentsResponse_google_firestore_v1_BeginTransactionRequest_google_firestore_v1_BeginTransactionResponse_google_firestore_v1_CommitRequest_google_firestore_v1_CommitResponse_google_firestore_v1_RollbackRequest_google_firestore_v1_RunQueryRequest_google_firestore_v1_RunQueryResponse_google_firestore_v1_WriteRequest_google_firestore_v1_WriteRequest_LabelsEntry_google_firestore_v1_WriteResponse_google_firestore_v1_ListenRequest_google_firestore_v1_ListenRequest_LabelsEntry_google_firestore_v1_ListenResponse_google_firestore_v1_Target_google_firestore_v1_Target_DocumentsTarget_google_firestore_v1_Target_QueryTarget_google_firestore_v1_TargetChange_google_firestore_v1_ListCollectionIdsRequest_google_firestore_v1_ListCollectionIdsResponse)
#endif

#if !defined(PB_FIELD_16BIT) && !defined(PB_FIELD_32BIT)
/* If you get an error here, it means that you need to define PB_FIELD_16BIT
 * compile-time option. You can do that in pb.h or on compiler command line.
 * 
 * The reason you need to do this is that some of your messages contain tag
 * numbers or field sizes that are larger than what can fit in the default
 * 8 bit descriptors.
 */
PB_STATIC_ASSERT((pb_membersize(google_firestore_v1_GetDocumentRequest, read_time) < 256 && pb_membersize(google_firestore_v1_GetDocumentRequest, mask) < 256 && pb_membersize(google_firestore_v1_ListDocumentsRequest, read_time) < 256 && pb_membersize(google_firestore_v1_ListDocumentsRequest, mask) < 256 && pb_membersize(google_firestore_v1_CreateDocumentRequest, document) < 256 && pb_membersize(google_firestore_v1_CreateDocumentRequest, mask) < 256 && pb_membersize(google_firestore_v1_UpdateDocumentRequest, document) < 256 && pb_membersize(google_firestore_v1_UpdateDocumentRequest, update_mask) < 256 && pb_membersize(google_firestore_v1_UpdateDocumentRequest, mask) < 256 && pb_membersize(google_firestore_v1_UpdateDocumentRequest, current_document) < 256 && pb_membersize(google_firestore_v1_DeleteDocumentRequest, current_document) < 256 && pb_membersize(google_firestore_v1_BatchGetDocumentsRequest, new_transaction) < 256 && pb_membersize(google_firestore_v1_BatchGetDocumentsRequest, read_time) < 256 && pb_membersize(google_firestore_v1_BatchGetDocumentsRequest, mask) < 256 && pb_membersize(google_firestore_v1_BatchGetDocumentsResponse, found) < 256 && pb_membersize(google_firestore_v1_BatchGetDocumentsResponse, read_time) < 256 && pb_membersize(google_firestore_v1_BeginTransactionRequest, options) < 256 && pb_membersize(google_firestore_v1_CommitResponse, commit_time) < 256 && pb_membersize(google_firestore_v1_RunQueryRequest, query_type.structured_query) < 256 && pb_membersize(google_firestore_v1_RunQueryRequest, consistency_selector.new_transaction) < 256 && pb_membersize(google_firestore_v1_RunQueryRequest, consistency_selector.read_time) < 256 && pb_membersize(google_firestore_v1_RunQueryResponse, document) < 256 && pb_membersize(google_firestore_v1_RunQueryResponse, read_time) < 256 && pb_membersize(google_firestore_v1_WriteResponse, commit_time) < 256 && pb_membersize(google_firestore_v1_ListenRequest, add_target) < 256 && pb_membersize(google_firestore_v1_ListenResponse, target_change) < 256 && pb_membersize(google_firestore_v1_ListenResponse, document_change) < 256 && pb_membersize(google_firestore_v1_ListenResponse, document_delete) < 256 && pb_membersize(google_firestore_v1_ListenResponse, filter) < 256 && pb_membersize(google_firestore_v1_ListenResponse, document_remove) < 256 && pb_membersize(google_firestore_v1_Target, target_type.query) < 256 && pb_membersize(google_firestore_v1_Target, target_type.documents) < 256 && pb_membersize(google_firestore_v1_Target, resume_type.read_time) < 256 && pb_membersize(google_firestore_v1_Target_QueryTarget, structured_query) < 256 && pb_membersize(google_firestore_v1_TargetChange, cause) < 256 && pb_membersize(google_firestore_v1_TargetChange, read_time) < 256), YOU_MUST_DEFINE_PB_FIELD_16BIT_FOR_MESSAGES_google_firestore_v1_GetDocumentRequest_google_firestore_v1_ListDocumentsRequest_google_firestore_v1_ListDocumentsResponse_google_firestore_v1_CreateDocumentRequest_google_firestore_v1_UpdateDocumentRequest_google_firestore_v1_DeleteDocumentRequest_google_firestore_v1_BatchGetDocumentsRequest_google_firestore_v1_BatchGetDocumentsResponse_google_firestore_v1_BeginTransactionRequest_google_firestore_v1_BeginTransactionResponse_google_firestore_v1_CommitRequest_google_firestore_v1_CommitResponse_google_firestore_v1_RollbackRequest_google_firestore_v1_RunQueryRequest_google_firestore_v1_RunQueryResponse_google_firestore_v1_WriteRequest_google_firestore_v1_WriteRequest_LabelsEntry_google_firestore_v1_WriteResponse_google_firestore_v1_ListenRequest_google_firestore_v1_ListenRequest_LabelsEntry_google_firestore_v1_ListenResponse_google_firestore_v1_Target_google_firestore_v1_Target_DocumentsTarget_google_firestore_v1_Target_QueryTarget_google_firestore_v1_TargetChange_google_firestore_v1_ListCollectionIdsRequest_google_firestore_v1_ListCollectionIdsResponse)
#endif


const char* EnumToString(
  google_firestore_v1_TargetChange_TargetChangeType value) {
    switch (value) {
    case google_firestore_v1_TargetChange_TargetChangeType_NO_CHANGE:
        return "NO_CHANGE";
    case google_firestore_v1_TargetChange_TargetChangeType_ADD:
        return "ADD";
    case google_firestore_v1_TargetChange_TargetChangeType_REMOVE:
        return "REMOVE";
    case google_firestore_v1_TargetChange_TargetChangeType_CURRENT:
        return "CURRENT";
    case google_firestore_v1_TargetChange_TargetChangeType_RESET:
        return "RESET";
    }
    return "<unknown enum value>";
}

std::string google_firestore_v1_GetDocumentRequest::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<GetDocumentRequest 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("name: ", name, indent + 1, false);
    result += PrintField("mask ", mask, indent + 1, false);
    switch (which_consistency_selector) {
    case google_firestore_v1_GetDocumentRequest_transaction_tag:
        result += PrintField("transaction: ", transaction, indent + 1, true);
        break;
    case google_firestore_v1_GetDocumentRequest_read_time_tag:
        result += PrintField("read_time ", read_time, indent + 1, true);
        break;
    }


    std::string tail = Indent(is_root ? 0 : indent) + '}';
    return header + result + tail;
}

std::string google_firestore_v1_ListDocumentsRequest::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<ListDocumentsRequest 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("parent: ", parent, indent + 1, false);
    result += PrintField("collection_id: ", collection_id, indent + 1, false);
    result += PrintField("page_size: ", page_size, indent + 1, false);
    result += PrintField("page_token: ", page_token, indent + 1, false);
    result += PrintField("order_by: ", order_by, indent + 1, false);
    result += PrintField("mask ", mask, indent + 1, false);
    switch (which_consistency_selector) {
    case google_firestore_v1_ListDocumentsRequest_transaction_tag:
        result += PrintField("transaction: ", transaction, indent + 1, true);
        break;
    case google_firestore_v1_ListDocumentsRequest_read_time_tag:
        result += PrintField("read_time ", read_time, indent + 1, true);
        break;
    }

    result += PrintField("show_missing: ", show_missing, indent + 1, false);

    std::string tail = Indent(is_root ? 0 : indent) + '}';
    return header + result + tail;
}

std::string google_firestore_v1_ListDocumentsResponse::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<ListDocumentsResponse 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    for (pb_size_t i = 0; i != documents_count; ++i) {
        result += PrintField("documents ", documents[i], indent + 1, true);
    }
    result += PrintField("next_page_token: ", next_page_token, indent + 1, false);

    if (!result.empty() || is_root) {
      std::string tail = Indent(is_root ? 0 : indent) + '}';
      return header + result + tail;
    } else {
      return "";
    }
}

std::string google_firestore_v1_CreateDocumentRequest::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<CreateDocumentRequest 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("parent: ", parent, indent + 1, false);
    result += PrintField("collection_id: ", collection_id, indent + 1, false);
    result += PrintField("document_id: ", document_id, indent + 1, false);
    result += PrintField("document ", document, indent + 1, false);
    result += PrintField("mask ", mask, indent + 1, false);

    std::string tail = Indent(is_root ? 0 : indent) + '}';
    return header + result + tail;
}

std::string google_firestore_v1_UpdateDocumentRequest::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<UpdateDocumentRequest 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("document ", document, indent + 1, false);
    result += PrintField("update_mask ", update_mask, indent + 1, false);
    result += PrintField("mask ", mask, indent + 1, false);
    result += PrintField("current_document ", current_document, indent + 1, false);

    std::string tail = Indent(is_root ? 0 : indent) + '}';
    return header + result + tail;
}

std::string google_firestore_v1_DeleteDocumentRequest::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<DeleteDocumentRequest 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("name: ", name, indent + 1, false);
    result += PrintField("current_document ", current_document, indent + 1, false);

    std::string tail = Indent(is_root ? 0 : indent) + '}';
    return header + result + tail;
}

std::string google_firestore_v1_BatchGetDocumentsRequest::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<BatchGetDocumentsRequest 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("database: ", database, indent + 1, false);
    for (pb_size_t i = 0; i != documents_count; ++i) {
        result += PrintField("documents: ", documents[i], indent + 1, true);
    }
    result += PrintField("mask ", mask, indent + 1, false);
    switch (which_consistency_selector) {
    case google_firestore_v1_BatchGetDocumentsRequest_transaction_tag:
        result += PrintField("transaction: ", transaction, indent + 1, true);
        break;
    case google_firestore_v1_BatchGetDocumentsRequest_new_transaction_tag:
        result += PrintField("new_transaction ", new_transaction, indent + 1, true);
        break;
    case google_firestore_v1_BatchGetDocumentsRequest_read_time_tag:
        result += PrintField("read_time ", read_time, indent + 1, true);
        break;
    }


    std::string tail = Indent(is_root ? 0 : indent) + '}';
    return header + result + tail;
}

std::string google_firestore_v1_BatchGetDocumentsResponse::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<BatchGetDocumentsResponse 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    switch (which_result) {
    case google_firestore_v1_BatchGetDocumentsResponse_found_tag:
        result += PrintField("found ", found, indent + 1, true);
        break;
    case google_firestore_v1_BatchGetDocumentsResponse_missing_tag:
        result += PrintField("missing: ", missing, indent + 1, true);
        break;
    }

    result += PrintField("transaction: ", transaction, indent + 1, false);
    result += PrintField("read_time ", read_time, indent + 1, false);

    std::string tail = Indent(is_root ? 0 : indent) + '}';
    return header + result + tail;
}

std::string google_firestore_v1_BeginTransactionRequest::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<BeginTransactionRequest 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("database: ", database, indent + 1, false);
    result += PrintField("options ", options, indent + 1, false);

    std::string tail = Indent(is_root ? 0 : indent) + '}';
    return header + result + tail;
}

std::string google_firestore_v1_BeginTransactionResponse::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<BeginTransactionResponse 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("transaction: ", transaction, indent + 1, false);

    if (!result.empty() || is_root) {
      std::string tail = Indent(is_root ? 0 : indent) + '}';
      return header + result + tail;
    } else {
      return "";
    }
}

std::string google_firestore_v1_CommitRequest::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<CommitRequest 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("database: ", database, indent + 1, false);
    for (pb_size_t i = 0; i != writes_count; ++i) {
        result += PrintField("writes ", writes[i], indent + 1, true);
    }
    result += PrintField("transaction: ", transaction, indent + 1, false);

    if (!result.empty() || is_root) {
      std::string tail = Indent(is_root ? 0 : indent) + '}';
      return header + result + tail;
    } else {
      return "";
    }
}

std::string google_firestore_v1_CommitResponse::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<CommitResponse 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    for (pb_size_t i = 0; i != write_results_count; ++i) {
        result += PrintField("write_results ", write_results[i], indent + 1, true);
    }
    result += PrintField("commit_time ", commit_time, indent + 1, false);

    std::string tail = Indent(is_root ? 0 : indent) + '}';
    return header + result + tail;
}

std::string google_firestore_v1_RollbackRequest::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<RollbackRequest 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("database: ", database, indent + 1, false);
    result += PrintField("transaction: ", transaction, indent + 1, false);

    if (!result.empty() || is_root) {
      std::string tail = Indent(is_root ? 0 : indent) + '}';
      return header + result + tail;
    } else {
      return "";
    }
}

std::string google_firestore_v1_RunQueryRequest::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<RunQueryRequest 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("parent: ", parent, indent + 1, false);
    switch (which_query_type) {
    case google_firestore_v1_RunQueryRequest_structured_query_tag:
        result += PrintField("structured_query ", query_type.structured_query, indent + 1, true);
        break;
    }

    switch (which_consistency_selector) {
    case google_firestore_v1_RunQueryRequest_transaction_tag:
        result += PrintField("transaction: ", consistency_selector.transaction, indent + 1, true);
        break;
    case google_firestore_v1_RunQueryRequest_new_transaction_tag:
        result += PrintField("new_transaction ", consistency_selector.new_transaction, indent + 1, true);
        break;
    case google_firestore_v1_RunQueryRequest_read_time_tag:
        result += PrintField("read_time ", consistency_selector.read_time, indent + 1, true);
        break;
    }


    if (!result.empty() || is_root) {
      std::string tail = Indent(is_root ? 0 : indent) + '}';
      return header + result + tail;
    } else {
      return "";
    }
}

std::string google_firestore_v1_RunQueryResponse::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<RunQueryResponse 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("document ", document, indent + 1, false);
    result += PrintField("transaction: ", transaction, indent + 1, false);
    result += PrintField("read_time ", read_time, indent + 1, false);
    result += PrintField("skipped_results: ", skipped_results, indent + 1, false);

    std::string tail = Indent(is_root ? 0 : indent) + '}';
    return header + result + tail;
}

std::string google_firestore_v1_WriteRequest::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<WriteRequest 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("database: ", database, indent + 1, false);
    result += PrintField("stream_id: ", stream_id, indent + 1, false);
    for (pb_size_t i = 0; i != writes_count; ++i) {
        result += PrintField("writes ", writes[i], indent + 1, true);
    }
    result += PrintField("stream_token: ", stream_token, indent + 1, false);
    for (pb_size_t i = 0; i != labels_count; ++i) {
        result += PrintField("labels ", labels[i], indent + 1, true);
    }

    if (!result.empty() || is_root) {
      std::string tail = Indent(is_root ? 0 : indent) + '}';
      return header + result + tail;
    } else {
      return "";
    }
}

std::string google_firestore_v1_WriteRequest_LabelsEntry::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<LabelsEntry 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("key: ", key, indent + 1, false);
    result += PrintField("value: ", value, indent + 1, false);

    if (!result.empty() || is_root) {
      std::string tail = Indent(is_root ? 0 : indent) + '}';
      return header + result + tail;
    } else {
      return "";
    }
}

std::string google_firestore_v1_WriteResponse::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<WriteResponse 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("stream_id: ", stream_id, indent + 1, false);
    result += PrintField("stream_token: ", stream_token, indent + 1, false);
    for (pb_size_t i = 0; i != write_results_count; ++i) {
        result += PrintField("write_results ", write_results[i], indent + 1, true);
    }
    result += PrintField("commit_time ", commit_time, indent + 1, false);

    std::string tail = Indent(is_root ? 0 : indent) + '}';
    return header + result + tail;
}

std::string google_firestore_v1_ListenRequest::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<ListenRequest 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("database: ", database, indent + 1, false);
    switch (which_target_change) {
    case google_firestore_v1_ListenRequest_add_target_tag:
        result += PrintField("add_target ", add_target, indent + 1, true);
        break;
    case google_firestore_v1_ListenRequest_remove_target_tag:
        result += PrintField("remove_target: ", remove_target, indent + 1, true);
        break;
    }

    for (pb_size_t i = 0; i != labels_count; ++i) {
        result += PrintField("labels ", labels[i], indent + 1, true);
    }

    if (!result.empty() || is_root) {
      std::string tail = Indent(is_root ? 0 : indent) + '}';
      return header + result + tail;
    } else {
      return "";
    }
}

std::string google_firestore_v1_ListenRequest_LabelsEntry::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<LabelsEntry 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("key: ", key, indent + 1, false);
    result += PrintField("value: ", value, indent + 1, false);

    if (!result.empty() || is_root) {
      std::string tail = Indent(is_root ? 0 : indent) + '}';
      return header + result + tail;
    } else {
      return "";
    }
}

std::string google_firestore_v1_ListenResponse::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<ListenResponse 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    switch (which_response_type) {
    case google_firestore_v1_ListenResponse_target_change_tag:
        result += PrintField("target_change ", target_change, indent + 1, true);
        break;
    case google_firestore_v1_ListenResponse_document_change_tag:
        result += PrintField("document_change ", document_change, indent + 1, true);
        break;
    case google_firestore_v1_ListenResponse_document_delete_tag:
        result += PrintField("document_delete ", document_delete, indent + 1, true);
        break;
    case google_firestore_v1_ListenResponse_filter_tag:
        result += PrintField("filter ", filter, indent + 1, true);
        break;
    case google_firestore_v1_ListenResponse_document_remove_tag:
        result += PrintField("document_remove ", document_remove, indent + 1, true);
        break;
    }


    if (!result.empty() || is_root) {
      std::string tail = Indent(is_root ? 0 : indent) + '}';
      return header + result + tail;
    } else {
      return "";
    }
}

std::string google_firestore_v1_Target::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<Target 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    switch (which_target_type) {
    case google_firestore_v1_Target_query_tag:
        result += PrintField("query ", target_type.query, indent + 1, true);
        break;
    case google_firestore_v1_Target_documents_tag:
        result += PrintField("documents ", target_type.documents, indent + 1, true);
        break;
    }

    switch (which_resume_type) {
    case google_firestore_v1_Target_resume_token_tag:
        result += PrintField("resume_token: ", resume_type.resume_token, indent + 1, true);
        break;
    case google_firestore_v1_Target_read_time_tag:
        result += PrintField("read_time ", resume_type.read_time, indent + 1, true);
        break;
    }

    result += PrintField("target_id: ", target_id, indent + 1, false);
    result += PrintField("once: ", once, indent + 1, false);

    if (!result.empty() || is_root) {
      std::string tail = Indent(is_root ? 0 : indent) + '}';
      return header + result + tail;
    } else {
      return "";
    }
}

std::string google_firestore_v1_Target_DocumentsTarget::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<DocumentsTarget 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    for (pb_size_t i = 0; i != documents_count; ++i) {
        result += PrintField("documents: ", documents[i], indent + 1, true);
    }

    if (!result.empty() || is_root) {
      std::string tail = Indent(is_root ? 0 : indent) + '}';
      return header + result + tail;
    } else {
      return "";
    }
}

std::string google_firestore_v1_Target_QueryTarget::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<QueryTarget 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("parent: ", parent, indent + 1, false);
    switch (which_query_type) {
    case google_firestore_v1_Target_QueryTarget_structured_query_tag:
        result += PrintField("structured_query ", structured_query, indent + 1, true);
        break;
    }


    if (!result.empty() || is_root) {
      std::string tail = Indent(is_root ? 0 : indent) + '}';
      return header + result + tail;
    } else {
      return "";
    }
}

std::string google_firestore_v1_TargetChange::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<TargetChange 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintEnumField(
              "target_change_type: : ", target_change_type, indent + 1);
    for (pb_size_t i = 0; i != target_ids_count; ++i) {
        result += PrintField("target_ids: ", target_ids[i], indent + 1, true);
    }
    if (has_cause) {
        result += PrintField("cause ", cause, indent + 1, true);
    }
    result += PrintField("resume_token: ", resume_token, indent + 1, false);
    result += PrintField("read_time ", read_time, indent + 1, false);

    std::string tail = Indent(is_root ? 0 : indent) + '}';
    return header + result + tail;
}

std::string google_firestore_v1_ListCollectionIdsRequest::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<ListCollectionIdsRequest 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    result += PrintField("parent: ", parent, indent + 1, false);
    result += PrintField("page_size: ", page_size, indent + 1, false);
    result += PrintField("page_token: ", page_token, indent + 1, false);

    if (!result.empty() || is_root) {
      std::string tail = Indent(is_root ? 0 : indent) + '}';
      return header + result + tail;
    } else {
      return "";
    }
}

std::string google_firestore_v1_ListCollectionIdsResponse::ToString(int indent) const {
    std::string result;

    bool is_root = indent == 0;
    std::string header;
    if (is_root) {
        indent = 1;
        auto p = absl::Hex{reinterpret_cast<uintptr_t>(this)};
        absl::StrAppend(&header, "<ListCollectionIdsResponse 0x", p, ">: {\n");
    } else {
        header = "{\n";
    }

    for (pb_size_t i = 0; i != collection_ids_count; ++i) {
        result += PrintField("collection_ids: ", collection_ids[i], indent + 1, true);
    }
    result += PrintField("next_page_token: ", next_page_token, indent + 1, false);

    if (!result.empty() || is_root) {
      std::string tail = Indent(is_root ? 0 : indent) + '}';
      return header + result + tail;
    } else {
      return "";
    }
}

}  // namespace firestore
}  // namespace firebase
/* @@protoc_insertion_point(eof) */
